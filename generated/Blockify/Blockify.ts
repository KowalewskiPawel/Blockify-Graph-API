// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get approved(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class ApprovalForAll extends ethereum.Event {
  get params(): ApprovalForAll__Params {
    return new ApprovalForAll__Params(this);
  }
}

export class ApprovalForAll__Params {
  _event: ApprovalForAll;

  constructor(event: ApprovalForAll) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get operator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get approved(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class BlogFollowed extends ethereum.Event {
  get params(): BlogFollowed__Params {
    return new BlogFollowed__Params(this);
  }
}

export class BlogFollowed__Params {
  _event: BlogFollowed;

  constructor(event: BlogFollowed) {
    this._event = event;
  }

  get blogId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get follower(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class BlogNFTMinted extends ethereum.Event {
  get params(): BlogNFTMinted__Params {
    return new BlogNFTMinted__Params(this);
  }
}

export class BlogNFTMinted__Params {
  _event: BlogNFTMinted;

  constructor(event: BlogNFTMinted) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get blogId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get blogData(): BlogNFTMintedBlogDataStruct {
    return changetype<BlogNFTMintedBlogDataStruct>(
      this._event.parameters[2].value.toTuple()
    );
  }
}

export class BlogNFTMintedBlogDataStruct extends ethereum.Tuple {
  get blogOwner(): Address {
    return this[0].toAddress();
  }

  get blogId(): BigInt {
    return this[1].toBigInt();
  }

  get blogDid(): string {
    return this[2].toString();
  }

  get blogname(): string {
    return this[3].toString();
  }

  get coverPicture(): string {
    return this[4].toString();
  }

  get followers(): BigInt {
    return this[5].toBigInt();
  }
}

export class CommentAdded extends ethereum.Event {
  get params(): CommentAdded__Params {
    return new CommentAdded__Params(this);
  }
}

export class CommentAdded__Params {
  _event: CommentAdded;

  constructor(event: CommentAdded) {
    this._event = event;
  }

  get commentAdded(): CommentAddedCommentAddedStruct {
    return changetype<CommentAddedCommentAddedStruct>(
      this._event.parameters[0].value.toTuple()
    );
  }
}

export class CommentAddedCommentAddedStruct extends ethereum.Tuple {
  get idOfPost(): string {
    return this[0].toString();
  }

  get content(): string {
    return this[1].toString();
  }

  get authorId(): Address {
    return this[2].toAddress();
  }

  get date(): BigInt {
    return this[3].toBigInt();
  }
}

export class PostAdded extends ethereum.Event {
  get params(): PostAdded__Params {
    return new PostAdded__Params(this);
  }
}

export class PostAdded__Params {
  _event: PostAdded;

  constructor(event: PostAdded) {
    this._event = event;
  }

  get postAdded(): PostAddedPostAddedStruct {
    return changetype<PostAddedPostAddedStruct>(
      this._event.parameters[0].value.toTuple()
    );
  }
}

export class PostAddedPostAddedStruct extends ethereum.Tuple {
  get id(): string {
    return this[0].toString();
  }

  get title(): string {
    return this[1].toString();
  }

  get content(): string {
    return this[2].toString();
  }

  get picture(): string {
    return this[3].toString();
  }

  get video(): string {
    return this[4].toString();
  }

  get username(): string {
    return this[5].toString();
  }

  get authorId(): BigInt {
    return this[6].toBigInt();
  }

  get date(): BigInt {
    return this[7].toBigInt();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Blockify__blogCommentsResult {
  value0: string;
  value1: string;
  value2: Address;
  value3: BigInt;

  constructor(value0: string, value1: string, value2: Address, value3: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromString(this.value0));
    map.set("value1", ethereum.Value.fromString(this.value1));
    map.set("value2", ethereum.Value.fromAddress(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    return map;
  }

  getIdOfPost(): string {
    return this.value0;
  }

  getContent(): string {
    return this.value1;
  }

  getAuthorId(): Address {
    return this.value2;
  }

  getDate(): BigInt {
    return this.value3;
  }
}

export class Blockify__blogsResult {
  value0: Address;
  value1: BigInt;
  value2: string;
  value3: string;
  value4: string;
  value5: BigInt;

  constructor(
    value0: Address,
    value1: BigInt,
    value2: string,
    value3: string,
    value4: string,
    value5: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromString(this.value2));
    map.set("value3", ethereum.Value.fromString(this.value3));
    map.set("value4", ethereum.Value.fromString(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    return map;
  }

  getBlogOwner(): Address {
    return this.value0;
  }

  getBlogId(): BigInt {
    return this.value1;
  }

  getBlogDid(): string {
    return this.value2;
  }

  getBlogname(): string {
    return this.value3;
  }

  getCoverPicture(): string {
    return this.value4;
  }

  getFollowers(): BigInt {
    return this.value5;
  }
}

export class Blockify__checkProfileOwnerResultValue0Struct extends ethereum.Tuple {
  get blogOwner(): Address {
    return this[0].toAddress();
  }

  get blogId(): BigInt {
    return this[1].toBigInt();
  }

  get blogDid(): string {
    return this[2].toString();
  }

  get blogname(): string {
    return this[3].toString();
  }

  get coverPicture(): string {
    return this[4].toString();
  }

  get followers(): BigInt {
    return this[5].toBigInt();
  }
}

export class Blockify__getCommentsResultValue0Struct extends ethereum.Tuple {
  get idOfPost(): string {
    return this[0].toString();
  }

  get content(): string {
    return this[1].toString();
  }

  get authorId(): Address {
    return this[2].toAddress();
  }

  get date(): BigInt {
    return this[3].toBigInt();
  }
}

export class Blockify__postCommentsResult {
  value0: string;
  value1: string;
  value2: Address;
  value3: BigInt;

  constructor(value0: string, value1: string, value2: Address, value3: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromString(this.value0));
    map.set("value1", ethereum.Value.fromString(this.value1));
    map.set("value2", ethereum.Value.fromAddress(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    return map;
  }

  getIdOfPost(): string {
    return this.value0;
  }

  getContent(): string {
    return this.value1;
  }

  getAuthorId(): Address {
    return this.value2;
  }

  getDate(): BigInt {
    return this.value3;
  }
}

export class Blockify extends ethereum.SmartContract {
  static bind(address: Address): Blockify {
    return new Blockify("Blockify", address);
  }

  TOKEN_ADDRESS(): Address {
    let result = super.call("TOKEN_ADDRESS", "TOKEN_ADDRESS():(address)", []);

    return result[0].toAddress();
  }

  try_TOKEN_ADDRESS(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "TOKEN_ADDRESS",
      "TOKEN_ADDRESS():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  balanceOf(owner: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(owner: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  blogComments(param0: string, param1: BigInt): Blockify__blogCommentsResult {
    let result = super.call(
      "blogComments",
      "blogComments(string,uint256):(string,string,address,uint256)",
      [
        ethereum.Value.fromString(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return new Blockify__blogCommentsResult(
      result[0].toString(),
      result[1].toString(),
      result[2].toAddress(),
      result[3].toBigInt()
    );
  }

  try_blogComments(
    param0: string,
    param1: BigInt
  ): ethereum.CallResult<Blockify__blogCommentsResult> {
    let result = super.tryCall(
      "blogComments",
      "blogComments(string,uint256):(string,string,address,uint256)",
      [
        ethereum.Value.fromString(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Blockify__blogCommentsResult(
        value[0].toString(),
        value[1].toString(),
        value[2].toAddress(),
        value[3].toBigInt()
      )
    );
  }

  blogFollowers(param0: BigInt, param1: BigInt): Address {
    let result = super.call(
      "blogFollowers",
      "blogFollowers(uint256,uint256):(address)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return result[0].toAddress();
  }

  try_blogFollowers(
    param0: BigInt,
    param1: BigInt
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "blogFollowers",
      "blogFollowers(uint256,uint256):(address)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  blogs(param0: BigInt): Blockify__blogsResult {
    let result = super.call(
      "blogs",
      "blogs(uint256):(address,uint256,string,string,string,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new Blockify__blogsResult(
      result[0].toAddress(),
      result[1].toBigInt(),
      result[2].toString(),
      result[3].toString(),
      result[4].toString(),
      result[5].toBigInt()
    );
  }

  try_blogs(param0: BigInt): ethereum.CallResult<Blockify__blogsResult> {
    let result = super.tryCall(
      "blogs",
      "blogs(uint256):(address,uint256,string,string,string,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Blockify__blogsResult(
        value[0].toAddress(),
        value[1].toBigInt(),
        value[2].toString(),
        value[3].toString(),
        value[4].toString(),
        value[5].toBigInt()
      )
    );
  }

  blogsOwners(param0: BigInt): Address {
    let result = super.call("blogsOwners", "blogsOwners(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toAddress();
  }

  try_blogsOwners(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "blogsOwners",
      "blogsOwners(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  checkProfileOwner(
    _blogToCheckId: BigInt
  ): Blockify__checkProfileOwnerResultValue0Struct {
    let result = super.call(
      "checkProfileOwner",
      "checkProfileOwner(uint256):((address,uint256,string,string,string,uint256))",
      [ethereum.Value.fromUnsignedBigInt(_blogToCheckId)]
    );

    return changetype<Blockify__checkProfileOwnerResultValue0Struct>(
      result[0].toTuple()
    );
  }

  try_checkProfileOwner(
    _blogToCheckId: BigInt
  ): ethereum.CallResult<Blockify__checkProfileOwnerResultValue0Struct> {
    let result = super.tryCall(
      "checkProfileOwner",
      "checkProfileOwner(uint256):((address,uint256,string,string,string,uint256))",
      [ethereum.Value.fromUnsignedBigInt(_blogToCheckId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<Blockify__checkProfileOwnerResultValue0Struct>(
        value[0].toTuple()
      )
    );
  }

  doesBlogExist(param0: BigInt): boolean {
    let result = super.call("doesBlogExist", "doesBlogExist(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toBoolean();
  }

  try_doesBlogExist(param0: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "doesBlogExist",
      "doesBlogExist(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  doesBlognameExist(param0: string): boolean {
    let result = super.call(
      "doesBlognameExist",
      "doesBlognameExist(string):(bool)",
      [ethereum.Value.fromString(param0)]
    );

    return result[0].toBoolean();
  }

  try_doesBlognameExist(param0: string): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "doesBlognameExist",
      "doesBlognameExist(string):(bool)",
      [ethereum.Value.fromString(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  getApproved(tokenId: BigInt): Address {
    let result = super.call("getApproved", "getApproved(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toAddress();
  }

  try_getApproved(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getApproved",
      "getApproved(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getBlogFollowers(_blogFollowersId: BigInt): Array<Address> {
    let result = super.call(
      "getBlogFollowers",
      "getBlogFollowers(uint256):(address[])",
      [ethereum.Value.fromUnsignedBigInt(_blogFollowersId)]
    );

    return result[0].toAddressArray();
  }

  try_getBlogFollowers(
    _blogFollowersId: BigInt
  ): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall(
      "getBlogFollowers",
      "getBlogFollowers(uint256):(address[])",
      [ethereum.Value.fromUnsignedBigInt(_blogFollowersId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  getComments(_postId: string): Array<Blockify__getCommentsResultValue0Struct> {
    let result = super.call(
      "getComments",
      "getComments(string):((string,string,address,uint256)[])",
      [ethereum.Value.fromString(_postId)]
    );

    return result[0].toTupleArray<Blockify__getCommentsResultValue0Struct>();
  }

  try_getComments(
    _postId: string
  ): ethereum.CallResult<Array<Blockify__getCommentsResultValue0Struct>> {
    let result = super.tryCall(
      "getComments",
      "getComments(string):((string,string,address,uint256)[])",
      [ethereum.Value.fromString(_postId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTupleArray<Blockify__getCommentsResultValue0Struct>()
    );
  }

  isApprovedForAll(owner: Address, operator: Address): boolean {
    let result = super.call(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)]
    );

    return result[0].toBoolean();
  }

  try_isApprovedForAll(
    owner: Address,
    operator: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isFollower(param0: string): boolean {
    let result = super.call("isFollower", "isFollower(string):(bool)", [
      ethereum.Value.fromString(param0)
    ]);

    return result[0].toBoolean();
  }

  try_isFollower(param0: string): ethereum.CallResult<boolean> {
    let result = super.tryCall("isFollower", "isFollower(string):(bool)", [
      ethereum.Value.fromString(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  ownerOf(tokenId: BigInt): Address {
    let result = super.call("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toAddress();
  }

  try_ownerOf(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  postComments(param0: string, param1: BigInt): Blockify__postCommentsResult {
    let result = super.call(
      "postComments",
      "postComments(string,uint256):(string,string,address,uint256)",
      [
        ethereum.Value.fromString(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return new Blockify__postCommentsResult(
      result[0].toString(),
      result[1].toString(),
      result[2].toAddress(),
      result[3].toBigInt()
    );
  }

  try_postComments(
    param0: string,
    param1: BigInt
  ): ethereum.CallResult<Blockify__postCommentsResult> {
    let result = super.tryCall(
      "postComments",
      "postComments(string,uint256):(string,string,address,uint256)",
      [
        ethereum.Value.fromString(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Blockify__postCommentsResult(
        value[0].toString(),
        value[1].toString(),
        value[2].toAddress(),
        value[3].toBigInt()
      )
    );
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  tokenURI(_tokenId: BigInt): string {
    let result = super.call("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(_tokenId)
    ]);

    return result[0].toString();
  }

  try_tokenURI(_tokenId: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(_tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AddCommentCall extends ethereum.Call {
  get inputs(): AddCommentCall__Inputs {
    return new AddCommentCall__Inputs(this);
  }

  get outputs(): AddCommentCall__Outputs {
    return new AddCommentCall__Outputs(this);
  }
}

export class AddCommentCall__Inputs {
  _call: AddCommentCall;

  constructor(call: AddCommentCall) {
    this._call = call;
  }

  get _commentToAdd(): string {
    return this._call.inputValues[0].value.toString();
  }

  get _postId(): string {
    return this._call.inputValues[1].value.toString();
  }

  get _blogOwner(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _blogsId(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class AddCommentCall__Outputs {
  _call: AddCommentCall;

  constructor(call: AddCommentCall) {
    this._call = call;
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }
}

export class FollowBlogCall extends ethereum.Call {
  get inputs(): FollowBlogCall__Inputs {
    return new FollowBlogCall__Inputs(this);
  }

  get outputs(): FollowBlogCall__Outputs {
    return new FollowBlogCall__Outputs(this);
  }
}

export class FollowBlogCall__Inputs {
  _call: FollowBlogCall;

  constructor(call: FollowBlogCall) {
    this._call = call;
  }

  get _followedBlogId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _blogOwner(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class FollowBlogCall__Outputs {
  _call: FollowBlogCall;

  constructor(call: FollowBlogCall) {
    this._call = call;
  }
}

export class MintBlogNFTCall extends ethereum.Call {
  get inputs(): MintBlogNFTCall__Inputs {
    return new MintBlogNFTCall__Inputs(this);
  }

  get outputs(): MintBlogNFTCall__Outputs {
    return new MintBlogNFTCall__Outputs(this);
  }
}

export class MintBlogNFTCall__Inputs {
  _call: MintBlogNFTCall;

  constructor(call: MintBlogNFTCall) {
    this._call = call;
  }

  get _blogname(): string {
    return this._call.inputValues[0].value.toString();
  }

  get _blogdid(): string {
    return this._call.inputValues[1].value.toString();
  }

  get _coverPicture(): string {
    return this._call.inputValues[2].value.toString();
  }
}

export class MintBlogNFTCall__Outputs {
  _call: MintBlogNFTCall;

  constructor(call: MintBlogNFTCall) {
    this._call = call;
  }
}

export class SafeTransferFromCall extends ethereum.Call {
  get inputs(): SafeTransferFromCall__Inputs {
    return new SafeTransferFromCall__Inputs(this);
  }

  get outputs(): SafeTransferFromCall__Outputs {
    return new SafeTransferFromCall__Outputs(this);
  }
}

export class SafeTransferFromCall__Inputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SafeTransferFromCall__Outputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }
}

export class SafeTransferFrom1Call extends ethereum.Call {
  get inputs(): SafeTransferFrom1Call__Inputs {
    return new SafeTransferFrom1Call__Inputs(this);
  }

  get outputs(): SafeTransferFrom1Call__Outputs {
    return new SafeTransferFrom1Call__Outputs(this);
  }
}

export class SafeTransferFrom1Call__Inputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get data(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class SafeTransferFrom1Call__Outputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }
}

export class SetApprovalForAllCall extends ethereum.Call {
  get inputs(): SetApprovalForAllCall__Inputs {
    return new SetApprovalForAllCall__Inputs(this);
  }

  get outputs(): SetApprovalForAllCall__Outputs {
    return new SetApprovalForAllCall__Outputs(this);
  }
}

export class SetApprovalForAllCall__Inputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }

  get operator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get approved(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetApprovalForAllCall__Outputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }
}
